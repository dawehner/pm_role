<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function pm_role_menu() {
  $items['admin/settings/pm_role_settings'] = array(
    'title' => 'Pm Role settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pm_role_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pm_role.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function pm_role_menu_alter() {
  $callbacks['messages/user-name-autocomplete']['page callback'] = 'foo_messages_autocomplete_callback';
}

/**
 * Implementation of hook_theme().
 */
function pm_role_theme() {
  return array(
    'pm_role_admin_settings' => array(
    ),
  );
}

/**
 * @IDEA
 *   Per default darf jeder jedem eine PM schicken,
 *   Aber man kann rolle->rolle definieren ob der zugriff versteckt wird
 *     Hat man einmal access denied ists vorbei.
 *   Vorteil:
 *     - Man muss nur denied Settings speichern
 *
 * @TODO
 *   Better function comments.
 */

/**
 * Implementation of hook_form_privatemsg_new_alter().
 */
function pm_role_form_privatemsg_new_alter(&$form, &$form_state) {
  $form['#validate'][] = 'pm_role_form_privatemsg_new_validate';
}

/**
 * @TODO
 *   Needs testing.
 */
function pm_role_form_privatemsg_new_validate(&$form, &$form_state) {
  $author = $form_state['values']['author'];
  $recipient = user_load(array('name' => $form_state['values']['recipient']));
  if (!pm_role_access($author, $recipient)) {
    form_set_error('privatemsg][recipient]', t('You cannot send a message to !username', theme('username', $recipient)));
  }
}

/**
 * Central access function of this module.
 */
function pm_role_access($sender, $recipient) {
  $deny = FALSE;
  foreach ($sender->roles as $rid1 -> $role1) {
    foreach ($recipient->roles as $rid2 -> $role2) {
      $deny |= variable_get('pm_role_deny_from'. $rid1 .'_to_'. $rid2, FALSE);
    }
  }

  // Deny is the opposite of access.
  return !$deny;
}

/*
 * Return all rids which does user is allowed to send messages.
 * This function provides a much much better performance then pm_role_access, exspecially for autocomplete!
 *
 * @TODO Needs testing.
 */
function pm_role_allowed_roles($account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  foreach (user_roles(TRUE) as $rid2 => $role2) {
    $deny = FALSE;
    foreach ($account->roles as $rid -> $role1) {
      $deny |= variable_get('pm_role_deny_from'. $rid1 .'_to_'. $rid2, FALSE);
    }
    if ($deny) {
      $roles[$rid2] = $role2;
    }
  }

  return $roles;
}

/**
 * This function does the same as the normal privatemsg autocomplete but only returns valid users.
 * @see privatemsg_user_name_autocomplete
 *
 * @TODO
 *   Don't use the default one :)
 */
function pm_role_messages_autocomplete_callback($string) {
  $names = array();
  // 1: Parse $string and build list of valid user names.
  $fragments = explode(',', $string);
  foreach ($fragments as $index => $name) {
    $name = trim($name);
    if ($error = module_invoke('user', 'validate_name', $name)) {
      // Do nothing if this name does not validate.
    }
    else {
      $names[$name] = $name;
    }
  }

  // By using user_validate_user we can ensure that names included in $names are at least logisticaly possible.
  // 2: Find the next user name suggestion.
  $fragment = array_pop($names);
  if (!empty($fragment)) {
    $query = "SELECT name FROM {users} u WHERE name like '%s%%'";
    $query .= " AND name NOT IN ('". implode("', '", $names) ."')"; // This will prevent suggesting a name that is already in our list.
    $query .= " AND status <> 0 ORDER BY name ASC";
    $result = db_query_range($query, $fragment, 0, 10);
    $prefix = count($names) ? implode(", ", $names) .", " : '';
    // 3: Build proper suggestions and print.
    $matches = array();
    while ($user = db_fetch_object($result)) {
      $matches[$prefix . $user->name .", "] = $user->name;
    }
    print drupal_to_js($matches);
    exit();
  }
}

